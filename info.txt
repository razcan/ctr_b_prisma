npx prisma studio

npx nest g module auth

todo

5.autentificare
8.template-uri de contract plus placeholdere
9.meniu setari alerte(expira inainte cu n zile, s-a inchis inainte de termen, s-a schimbat resp ctr, nu a ajuns factura, modificat stare ctr)
10.meniu useri/drepturi
11.campuri variabile - utilizator (text/data nr. ordine, tip, tag)
12.preluare data anaf parteneri
13.corectii erori ui
14.parametrizare link-ip, adresa de email sender,
15.modul rapoarte
16.rez erori compilare
17.curatat componente ce nu sunt necesare
18.revizuit denumiri variabile si comenturi
19.sters obiect de ctr de la nivel de header ctr
20. continut ctr generare ctr din template
21. ecran definire template-uri cu placeholdere
22. export word https://www.npmjs.com/package/docx
23 scoatere din care uikit





https://www.postgresql.org/docs/current/plpgsql-trigger.html

abordarea noua - tabel audit prisma , logica in controller, si functie de returnare rezultate in bd

@Get('executeAuditPartner/:id')



create or replace function GetAuditContract(contractid integer) 
RETURNS TABLE (
    contract_id INT,
    Tip_Modificare text,
    Data_Modificare timestamp(3),
    Contract_Number text,
    Nume_Partener text,
    Nume_Entitate text,
    Stare text,
    Start_Date timestamp(3),
    End_Date timestamp(3),
    Sign_Date timestamp(3),
    Completion_Date timestamp(3),
    Nume_Categorie text,
    Departament text,
    Cashflow text,
    Tip_Contract text,
    Centru_Cost text
    
) AS $$
begin 
	RETURN QUERY
	select 
	c.id as contract_id, 
	c."operationType" Tip_Modificare,
	c."createdAt" as Data_Modificare,
	c.number as Contract_Number, 
	a.name as Nume_Partener, 
	b.name as Nume_Entitate, 
	cs.name as Stare,
	c.start as Start_Date ,
	c.end as End_Date ,
	c.sign as Sign_Date ,
	c.completion as Completion_Date ,
	ca.name as Nume_Categorie ,
	dep.name as Departament ,
    cf.name as Cashflow ,
    ct.name as Tip_Contract ,
    cc.name as Centru_Cost 
	from public."ContractsAudit" c
    left join public."Partners" a on c."partnersId" = a.id 
	left join public."Partners" b on c."entityId" = b.id 
	left join public."Category" ca  on c."categoryId"  = ca.id 
	left join public."ContractStatus" cs on cs."id" = c."statusId"
	left join public."Department" dep  on dep."id" = c."departmentId"
	left join public."Cashflow" cf on cf."id" = c."cashflowId"
	left join public."ContractType" ct on ct."id" = c."typeId"
	left join public."CostCenter"  cc on cc."id" = c."costcenterId"
	
where c.id  = contractid;
end;
$$ LANGUAGE plpgsql;


select * from GetAuditContract(2)

create audit table for partners table

create TABLE partners_audit(
operation         char(1)   NOT NULL,
stamp             timestamp NOT NULL,
id text,
"name" text,
fiscal_code text ,
commercial_reg text,
state text ,
email text 
);


create TABLE partners_audit(
operation         char(1)   NOT NULL,
stamp             timestamp NOT NULL,
id text,
"name" text,
fiscal_code text ,
commercial_reg text,
state text ,
email text 
);



CREATE OR REPLACE FUNCTION process_partners_audit() RETURNS TRIGGER AS $partners_audit$
    BEGIN
    
        IF (TG_OP = 'DELETE') THEN
            INSERT INTO partners_audit SELECT 'D', now(), OLD.id , OLD.name , OLD.fiscal_code, OLD.commercial_reg, OLD.state, OLD.email  ;
        ELSIF (TG_OP = 'UPDATE') THEN
            INSERT INTO partners_audit SELECT 'U', now(), NEW.id , NEW.name , NEW.fiscal_code, NEW.commercial_reg, NEW.state, NEW.email ;
        ELSIF (TG_OP = 'INSERT') THEN
            INSERT INTO partners_audit SELECT 'I', now(), NEW.id , NEW.name , NEW.fiscal_code, NEW.commercial_reg, NEW.state, NEW.email ;
        END IF;
        RETURN NULL; -- result is ignored since this is an AFTER trigger
    END;
$partners_audit$ LANGUAGE plpgsql;


    create trigger ccc after
    insert
    on
    public."Partners" for each row execute function process_partners_audit();

    create trigger
    update
    after
    update
    on
    public."Partners" for each row execute function process_partners_audit();



CREATE OR REPLACE FUNCTION my_procedure(param1 INT, param2 VARCHAR)
RETURNS VOID AS $$
BEGIN
    -- Your logic goes here
    -- You can use the parameters as needed
    -- For example, you can print the parameters:
    RAISE NOTICE 'Parameter 1: %', param1;
    RAISE NOTICE 'Parameter 2: %', param2;
END;
$$ LANGUAGE plpgsql;

CALL my_procedure(123, 'Hello');





CREATE TABLE public."Contracts_Audit" (
    audit_id serial4 PRIMARY KEY,
    operation_type CHAR(1),
    operation_timestamp TIMESTAMP,
	id int4 NOT NULL,
	"number" text NOT NULL,
	"start_date" timestamp(3) NOT NULL,
	"end_date" timestamp(3) NOT NULL,
	"sign_date" timestamp(3) NOT NULL,
	"completion_date" timestamp(3) NOT NULL,
	remarks text NOT NULL,
	partners_id int4 NULL,
    entity_id int4 NULL,
    entity_address_id int4 NULL,
    entity_bank_id int4 NULL,
    entity_persons_id int4 NULL,
    parent_id int4 NULL,
    partner_address_id int4 NULL,
    partner_bank_id int4 NULL,
    partner_persons_id int4 NULL,
    automatic_renewal bool DEFAULT false NOT NULL,
    department_id int4 NULL,
    cashflow_id int4 NULL,
    category_id int4 NULL,
    cost_center_id int4 NULL,
    item_id int4 NULL,
    status_id int4 NULL,
    type_id int4 NULL,
    contract_attachments_id int4 NULL,
    payment_type_id int4 NULL,
    contract_content_id int4 NULL
);


CREATE OR REPLACE FUNCTION process_contracts_audit() 
RETURNS TRIGGER AS 
$contracts_audit$
BEGIN
    IF (TG_OP = 'DELETE') THEN
        INSERT INTO Contracts_Audit (
            operation_type, 
            operation_timestamp, 
            id, 
            number, 
            start_date, 
            end_date, 
            sign_date, 
            completion_date,
            remarks, 
            partners_id, 
            entity_id, 
            entity_address_id, 
            entity_bank_id, 
            entity_persons_id, 
            parent_id,
            partner_address_id, 
            partner_bank_id, 
            partner_persons_id, 
            automatic_renewal, 
            department_id, 
            cashflow_id, 
            category_id, 
            cost_center_id, 
            item_id, 
            status_id, 
            type_id, 
            contract_attachments_id, 
            payment_type_id, 
            contract_content_id
        ) VALUES (
            'D', 
            now(), 
            OLD.id, 
            OLD.number, 
            OLD.start, 
            OLD.end, 
            OLD.sign, 
            OLD.completion,
            OLD.remarks, 
            OLD.partnersId, 
            OLD.entityId, 
            OLD.entityaddressId, 
            OLD.entitybankId, 
            OLD.entitypersonsId, 
            OLD.parentId,
            OLD.partneraddressId, 
            OLD.partnerbankId, 
            OLD.partnerpersonsId, 
            OLD.automaticRenewal, 
            OLD.departmentId, 
            OLD.cashflowId, 
            OLD.categoryId, 
            OLD.costcenterId, 
            OLD.itemId, 
            OLD.statusId, 
            OLD.typeId, 
            OLD.contractAttachmentsId, 
            OLD.paymentTypeId, 
            OLD.contractContentId
        );
    ELSIF (TG_OP = 'UPDATE') THEN
        INSERT INTO Contracts_Audit (
            operation_type, 
            operation_timestamp, 
            id, 
            number, 
            start_date, 
            end_date, 
            sign_date, 
            completion_date,
            remarks, 
            partners_id, 
            entity_id, 
            entity_address_id, 
            entity_bank_id, 
            entity_persons_id, 
            parent_id,
            partner_address_id, 
            partner_bank_id, 
            partner_persons_id, 
            automatic_renewal, 
            department_id, 
            cashflow_id, 
            category_id, 
            cost_center_id, 
            item_id, 
            status_id, 
            type_id, 
            contract_attachments_id, 
            payment_type_id, 
            contract_content_id
        ) VALUES (
            'U', 
            now(), 
            NEW.id, 
            NEW.number, 
            NEW.start, 
            NEW.end, 
            NEW.sign, 
            NEW.completion,
            NEW.remarks, 
            NEW.partnersId, 
            NEW.entityId, 
            NEW.entityaddressId, 
            NEW.entitybankId, 
            NEW.entitypersonsId, 
            NEW.parentId,
            NEW.partneraddressId, 
            NEW.partnerbankId, 
            NEW.partnerpersonsId, 
            NEW.automaticRenewal, 
            NEW.departmentId, 
            NEW.cashflowId, 
            NEW.categoryId, 
            NEW.costcenterId, 
            NEW.itemId, 
            NEW.statusId, 
            NEW.typeId, 
            NEW.contractAttachmentsId, 
            NEW.paymentTypeId, 
            NEW.contractContentId
        );
    END IF;
    RETURN NULL;
END;
$contracts_audit$ LANGUAGE plpgsql;


CREATE TRIGGER audit
    AFTER INSERT
    ON public."Contracts"
    FOR EACH ROW
    EXECUTE PROCEDURE public.process_contracts_audit();





 partners_id, 
            entity_id, 
            entity_address_id, 
            entity_bank_id, 
            entity_persons_id, 
            parent_id,
            partner_address_id, 
            partner_bank_id, 
            partner_persons_id, 
            automatic_renewal, 
            department_id, 
            cashflow_id, 
            category_id, 
            cost_center_id, 
            item_id, 
            status_id, 
            type_id, 
            contract_attachments_id, 
            payment_type_id, 
            contract_content_id


            OLD.partnersId, 
            OLD.entityId, 
            OLD.entityaddressId, 
            OLD.entitybankId, 
            OLD.entitypersonsId, 
            OLD.parentId,
            OLD.partneraddressId, 
            OLD.partnerbankId, 
            OLD.partnerpersonsId, 
            OLD.automaticRenewal, 
            OLD.departmentId, 
            OLD.cashflowId, 
            OLD.categoryId, 
            OLD.costcenterId, 
            OLD.itemId, 
            OLD.statusId, 
            OLD.typeId, 
            OLD.contractAttachmentsId, 
            OLD.paymentTypeId, 
            OLD.contractContentId


            NEW.partnersId, 
            NEW.entityId, 
            NEW.entityaddressId, 
            NEW.entitybankId, 
            NEW.entitypersonsId, 
            NEW.parentId,
            NEW.partneraddressId, 
            NEW.partnerbankId, 
            NEW.partnerpersonsId, 
            NEW.automaticRenewal, 
            NEW.departmentId, 
            NEW.cashflowId, 
            NEW.categoryId, 
            NEW.costcenterId, 
            NEW.itemId, 
            NEW.statusId, 
            NEW.typeId, 
            NEW.contractAttachmentsId, 
            NEW.paymentTypeId, 
            NEW.contractContentId


            partners_id int4 NULL,
    entity_id int4 NULL,
    entity_address_id int4 NULL,
    entity_bank_id int4 NULL,
    entity_persons_id int4 NULL,
    parent_id int4 NULL,
    partner_address_id int4 NULL,
    partner_bank_id int4 NULL,
    partner_persons_id int4 NULL,
    automatic_renewal bool DEFAULT false NOT NULL,
    department_id int4 NULL,
    cashflow_id int4 NULL,
    category_id int4 NULL,
    cost_center_id int4 NULL,
    item_id int4 NULL,
    status_id int4 NULL,
    type_id int4 NULL,
    contract_attachments_id int4 NULL,
    payment_type_id int4 NULL,
    contract_content_id int4 NULL