// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npx prisma migrate dev --name init

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src"
  outputToNestJsResourceStructure = "true"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String?
  email    String  @unique
  password String
  role     Role    @default(USER)
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Department {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Cashflow {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Item {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model CostCenter {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Entity {
  id   Int    @id @default(autoincrement())
  name String @unique
}

enum Role {
  USER
  ADMIN
}

model Contracts {
  id               Int       @id @default(autoincrement())
  number           String
  type             String
  status           String
  start            DateTime
  end              DateTime
  sign             DateTime
  completion       DateTime
  remarks          String
  category         String    @default("import")
  departament      String    @default("default")
  cashflow         String    @default("default")
  item             String    @default("default")
  costcenter       String    @default("default")
  automaticRenewal Boolean   @default(false)
  // contract         ContractsDetails[]
  partner          Partners? @relation("partner", fields: [partnersId], references: [id])
  partnersId       Int?
  entity           Partners? @relation("entity", fields: [entityId], references: [id])
  entityId         Int?
  parentId         Int?      @default(0)
  PartnerPerson    Persons?  @relation("partner", fields: [partnerpersonsId], references: [id])
  partnerpersonsId Int?
  EntityPerson     Persons?  @relation("entity", fields: [entitypersonsId], references: [id])
  entitypersonsId  Int?
  EntityAddress    Address?  @relation("entity", fields: [entityaddressId], references: [id])
  entityaddressId  Int?
  PartnerAddress   Address?  @relation("partner", fields: [partneraddressId], references: [id])
  partneraddressId Int?
  EntityBank       Banks?    @relation("entity", fields: [entitybankId], references: [id])
  entitybankId     Int?
  PartnerBank      Banks?    @relation("partner", fields: [partnerbankId], references: [id])
  partnerbankId    Int?
}

model ContractsDetails {
  id     Int    @id @default(autoincrement())
  name   String
  itemid Int
  // contract   Contracts @relation(fields: [contractId], references: [id])
  // contractId Int
}

model Partners {
  id             Int         @id @default(autoincrement())
  updateadAt     DateTime    @updatedAt
  createdAt      DateTime    @default(now())
  name           String      @unique
  fiscal_code    String      @unique
  commercial_reg String      @unique
  state          String
  type           String
  email          String
  remarks        String
  contractsId    Int?
  Persons        Persons[]
  Address        Address[]
  Banks          Banks[]
  Contracts      Contracts[] @relation("partner")
  Entity         Contracts[] @relation("entity")
}

model Persons {
  id             Int         @id @default(autoincrement())
  updateadAt     DateTime    @updatedAt
  createdAt      DateTime    @default(now())
  name           String      @unique
  phone          String?
  email          String?     @unique
  legalrepresent Boolean?
  role           String?
  partner        Partners    @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId      Int
  Contracts      Contracts[] @relation("partner")
  Entity         Contracts[] @relation("entity")
}

model Address {
  id              Int         @id @default(autoincrement())
  updateadAt      DateTime    @updatedAt
  createdAt       DateTime    @default(now())
  addressName     String?     @unique
  addressType     String?
  Country         String?
  County          String?
  City            String?
  Street          String?
  Number          String?
  postalCode      String?
  Status          Boolean?
  Default         Boolean?
  aggregate       Boolean?
  completeAddress String?
  partner         Partners    @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId       Int
  Contracts       Contracts[] @relation("partner")
  Entity          Contracts[] @relation("entity")
}

model Banks {
  id         Int         @id @default(autoincrement())
  updateadAt DateTime    @updatedAt
  createdAt  DateTime    @default(now())
  bank       String?
  currency   String?
  branch     String?
  iban       String?
  status     Boolean?
  partner    Partners    @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId  Int
  Contracts  Contracts[] @relation("partner")
  Enity      Contracts[] @relation("entity")
}
