// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npx prisma migrate dev --name init
//  npx prisma studio   
// https://www.prisma.io/docs/orm/prisma-migrate/workflows/seeding
// de analizat cum este facut la parteneri - trebuie trimis partnersId adica categoryId ...
// si de adaugat in package.json   "type": "module",
//erori https://www.prisma.io/docs/orm/reference/error-reference#error-codes

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src"
  outputToNestJsResourceStructure = "true"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String?
  email    String  @unique
  password String
  role     Role    @default(USER)
}

model Category {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  contractId Contracts[]
}

model Department {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  contractId Contracts[]
}

model Cashflow {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  contractId Contracts[]
}

model Item {
  id                              Int                               @id @default(autoincrement())
  name                            String                            @unique
  contractId                      Contracts[]
  ContractItems                   ContractItems[]
  ContractFinancialDetailSchedule ContractFinancialDetailSchedule[]
}

model CostCenter {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  contractId Contracts[]
}

model ContractType {
  id         Int         @id @default(autoincrement())
  name       String
  contractId Contracts[]
}

model MeasuringUnit {
  id                              Int                               @id @default(autoincrement())
  name                            String
  ContractFinancialDetail         ContractFinancialDetail[]
  ContractFinancialDetailSchedule ContractFinancialDetailSchedule[]
}

model Entity {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model PaymentType {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @unique
  contractId              Contracts[]
  ContractFinancialDetail ContractFinancialDetail[]
}

model ContractStatus {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  contractId Contracts[]
}

model ContractAttachments {
  id           Int        @id @default(autoincrement())
  updateadAt   DateTime   @updatedAt
  createdAt    DateTime   @default(now())
  fieldname    String
  originalname String
  encoding     String
  mimetype     String
  destination  String
  filename     String
  path         String
  size         Int
  contract     Contracts? @relation(fields: [contractId], references: [id])
  contractId   Int?
}

model Currency {
  id                              Int                               @id @default(autoincrement())
  code                            String                            @unique
  name                            String                            @unique
  ContractItems                   ContractItems[]
  ContractFinancialDetailSchedule ContractFinancialDetailSchedule[]
  item                            ContractFinancialDetail[]         @relation("item")
  guarantee                       ContractFinancialDetail[]         @relation("guarantee")
}

model Bank {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model BillingFrequency {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  ContractItems ContractItems[]
}

model ContractContent {
  id         Int        @id @default(autoincrement())
  updateadAt DateTime   @updatedAt
  createdAt  DateTime   @default(now())
  content    String     @db.Text
  contract   Contracts? @relation(fields: [contractId], references: [id])
  contractId Int?       @unique
}

enum Role {
  USER
  ADMIN
}

model Contracts {
  id                  Int                   @id @default(autoincrement())
  number              String
  type                ContractType          @relation(fields: [typeId], references: [id])
  typeId              Int
  costcenter          CostCenter            @relation(fields: [costcenterId], references: [id])
  costcenterId        Int                   @default(1)
  status              ContractStatus        @relation(fields: [statusId], references: [id])
  statusId            Int
  start               DateTime
  end                 DateTime
  sign                DateTime?
  completion          DateTime?
  remarks             String?
  Category            Category?             @relation(fields: [categoryId], references: [id])
  categoryId          Int?
  departament         Department?           @relation(fields: [departmentId], references: [id])
  departmentId        Int?
  cashflow            Cashflow?             @relation(fields: [cashflowId], references: [id])
  cashflowId          Int?
  item                Item?                 @relation(fields: [itemId], references: [id])
  itemId              Int?
  automaticRenewal    Boolean?              @default(false)
  partner             Partners              @relation("partner", fields: [partnersId], references: [id])
  partnersId          Int
  entity              Partners              @relation("entity", fields: [entityId], references: [id])
  entityId            Int
  parentId            Int?                  @default(0)
  PartnerPerson       Persons?              @relation("partner", fields: [partnerpersonsId], references: [id])
  partnerpersonsId    Int?
  EntityPerson        Persons?              @relation("entity", fields: [entitypersonsId], references: [id])
  entitypersonsId     Int?
  EntityAddress       Address?              @relation("entity", fields: [entityaddressId], references: [id])
  entityaddressId     Int?
  PartnerAddress      Address?              @relation("partner", fields: [partneraddressId], references: [id])
  partneraddressId    Int?
  EntityBank          Banks?                @relation("entity", fields: [entitybankId], references: [id])
  entitybankId        Int?
  PartnerBank         Banks?                @relation("partner", fields: [partnerbankId], references: [id])
  partnerbankId       Int?
  ContractItems       ContractItems[]
  ContractAttachments ContractAttachments[]
  ContractContent     ContractContent[]
  PaymentType         PaymentType?          @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId       Int?
}

model ContractsAudit {
  auditid               Int       @id @default(autoincrement())
  operationType         String
  id                    Int
  updateadAt            DateTime  @updatedAt
  createdAt             DateTime  @default(now())
  number                String
  typeId                Int?
  costcenterId          Int?
  statusId              Int
  start                 DateTime?
  end                   DateTime?
  sign                  DateTime?
  completion            DateTime?
  remarks               String?
  categoryId            Int?
  departmentId          Int?
  cashflowId            Int?
  itemId                Int?
  automaticRenewal      Boolean?
  partnersId            Int?
  entityId              Int?
  parentId              Int?
  partnerpersonsId      Int?
  entitypersonsId       Int?
  entityaddressId       Int?
  partneraddressId      Int?
  entitybankId          Int?
  partnerbankId         Int?
  contractAttachmentsId Int?
  paymentTypeId         Int?
  contractContentId     Int?
}

model ContractsDetails {
  id     Int    @id @default(autoincrement())
  name   String
  itemid Int
  // contract   Contracts @relation(fields: [contractId], references: [id])
  // contractId Int
}

model ContractItems {
  id                      Int                       @id @default(autoincrement())
  updateadAt              DateTime                  @updatedAt
  createdAt               DateTime                  @default(now())
  contract                Contracts?                @relation(fields: [contractId], references: [id])
  contractId              Int
  item                    Item?                     @relation(fields: [itemid], references: [id])
  itemid                  Int
  frequency               BillingFrequency?         @relation(fields: [billingFrequencyid], references: [id])
  billingFrequencyid      Int
  currency                Currency?                 @relation(fields: [currencyid], references: [id])
  currencyid              Int
  currencyValue           Float
  active                  Boolean                   @default(true)
  ContractFinancialDetail ContractFinancialDetail[]
}

model ContractFinancialDetail {
  id                              Int                               @id @default(autoincrement())
  updateadAt                      DateTime                          @updatedAt
  createdAt                       DateTime                          @default(now())
  itemid                          Int?
  totalContractValue              Float
  currency                        Currency?                         @relation("item", fields: [currencyid], references: [id])
  currencyid                      Int?
  currencyValue                   Float?
  currencyPercent                 Float?
  billingDay                      Int
  billingQtty                     Float
  billingFrequencyid              Int?
  measuringUnit                   MeasuringUnit?                    @relation(fields: [measuringUnitid], references: [id])
  measuringUnitid                 Int?
  paymentType                     PaymentType?                      @relation(fields: [paymentTypeid], references: [id])
  paymentTypeid                   Int?
  billingPenaltyPercent           Float
  billingDueDays                  Int
  remarks                         String?                           @db.VarChar(150)
  guaranteeLetter                 Boolean?
  guaranteecurrency               Currency?                         @relation("guarantee", fields: [guaranteeLetterCurrencyid], references: [id])
  guaranteeLetterCurrencyid       Int?
  guaranteeLetterDate             DateTime?
  guaranteeLetterValue            Float?
  active                          Boolean?                          @default(true)
  items                           ContractItems?                    @relation(fields: [contractItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contractItemId                  Int?
  ContractFinancialDetailSchedule ContractFinancialDetailSchedule[]
}

model ContractFinancialDetailSchedule {
  id                      Int                      @id @default(autoincrement())
  updateadAt              DateTime                 @updatedAt
  createdAt               DateTime                 @default(now())
  item                    Item?                    @relation(fields: [itemid], references: [id])
  itemid                  Int?
  currency                Currency?                @relation(fields: [currencyid], references: [id])
  currencyid              Int?
  date                    DateTime
  measuringUnit           MeasuringUnit?           @relation(fields: [measuringUnitid], references: [id])
  measuringUnitid         Int?
  billingQtty             Float
  totalContractValue      Float
  billingValue            Float
  isInvoiced              Boolean
  isPayed                 Boolean
  active                  Boolean                  @default(true)
  financial               ContractFinancialDetail? @relation(fields: [contractfinancialItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contractfinancialItemId Int?
}

model Alerts {
  id              Int      @id @default(autoincrement())
  updateadAt      DateTime @updatedAt
  createdAt       DateTime @default(now())
  name            String
  isActive        Boolean
  subject         String
  text            String   @db.Text
  internal_emails String
  nrofdays        Int
  param           String
  isActivePartner Boolean
  isActivePerson  Boolean
}

model ContractAlertSchedule {
  id           Int      @id @default(autoincrement())
  updateadAt   DateTime @updatedAt
  createdAt    DateTime @default(now())
  contractId   Int
  alertId      Int
  alertname    String
  datetoBeSent DateTime
  isActive     Boolean
  status       Boolean
  subject      String
  nrofdays     Int
}

model ContractTasks {
  id          Int                  @id @default(autoincrement())
  updateadAt  DateTime             @updatedAt
  createdAt   DateTime             @default(now())
  taskName    String
  contractId  Int?
  progress    Int
  status      ContractTasksStatus? @relation(fields: [statusId], references: [id])
  statusId    Int
  statusDate  DateTime             @default(now())
  requestor   Persons?             @relation("requestor", fields: [requestorId], references: [id])
  requestorId Int
  assigned    Persons?             @relation("assigned", fields: [assignedId], references: [id])
  assignedId  Int
  due         DateTime
  notes       String
}

model ContractTasksStatus {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  ContractTasks ContractTasks[]
}

model Partners {
  id             Int         @id @default(autoincrement())
  updateadAt     DateTime    @updatedAt
  createdAt      DateTime    @default(now())
  name           String      @unique
  fiscal_code    String      @unique
  commercial_reg String      @unique
  state          String
  type           String
  email          String
  remarks        String
  contractsId    Int?
  Persons        Persons[]
  Address        Address[]
  Banks          Banks[]
  Contracts      Contracts[] @relation("partner")
  Entity         Contracts[] @relation("entity")
}

model Persons {
  id             Int             @id @default(autoincrement())
  updateadAt     DateTime        @updatedAt
  createdAt      DateTime        @default(now())
  name           String          @unique
  phone          String?
  email          String?         @unique
  legalrepresent Boolean?
  role           String?
  partner        Partners        @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId      Int
  Contracts      Contracts[]     @relation("partner")
  Entity         Contracts[]     @relation("entity")
  AssignedTasks  ContractTasks[] @relation("assigned")
  RequestorTasks ContractTasks[] @relation("requestor")
}

model Address {
  id              Int         @id @default(autoincrement())
  updateadAt      DateTime    @updatedAt
  createdAt       DateTime    @default(now())
  addressName     String?     @unique
  addressType     String?
  Country         String?
  County          String?
  City            String?
  Street          String?
  Number          String?
  postalCode      String?
  Status          Boolean?
  Default         Boolean?
  aggregate       Boolean?
  completeAddress String?
  partner         Partners    @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId       Int
  Contracts       Contracts[] @relation("partner")
  Entity          Contracts[] @relation("entity")
}

model Banks {
  id         Int         @id @default(autoincrement())
  updateadAt DateTime    @updatedAt
  createdAt  DateTime    @default(now())
  bank       String?
  currency   String?
  branch     String?
  iban       String?
  status     Boolean?
  partner    Partners    @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId  Int
  Contracts  Contracts[] @relation("partner")
  Enity      Contracts[] @relation("entity")
}
