// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Apply migrations to your database to ensure schema consistency:

// npx prisma migrate dev --name init

// Clean up the old generated DTO files to ensure no outdated files remain:
// rm -rf src/dto/*

// Run the Prisma generate command to regenerate all DTOs:
// npx prisma generate

//  npx prisma studio   

// https://www.prisma.io/docs/orm/prisma-migrate/workflows/seeding
//node seed.js
// si de adaugat in package.json   "type": "module",
//erori https://www.prisma.io/docs/orm/reference/error-reference#error-codes

//generator nestjsDto {
//  provider                        = "prisma-generator-nestjs-dto"
//  output                          = "../src"
//  outputToNestJsResourceStructure = "true"
//  // exportRelationModifierClasses   = "true"
//  // reExport                        = "true"
//}


//generator client {
//  provider      = "prisma-client-js"
//  binaryTargets = ["native", "darwin", "debian-openssl-3.0.x"]
//}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src"
  outputToNestJsResourceStructure = "true"
  // exportRelationModifierClasses   = "true"
  // reExport                        = "true"
}

generator client {
  provider = "prisma-client-js"
}

 // url      =  env("DATABASE_URL")

datasource db {
  provider = "postgresql"
  url = "postgresql://postgres:123456@localhost:5433/Contracts?schema=public"
}

model Category {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  contractId Contracts[]
  Item       Item[]
}

model Department {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  contractId Contracts[]
}

model Location {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  contractId Contracts[]
}

model Cashflow {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  contractId Contracts[]
}

model Item {
  id                              Int                               @id @default(autoincrement())
  name                            String                            @unique
  code                            String?
  barCode                         String?
  description                     String?
  vat                             VatQuota?                         @relation(fields: [vatId], references: [id])
  vatId                           Int?
  measuringUnit                   MeasuringUnit?                    @relation(fields: [measuringUnitid], references: [id])
  measuringUnitid                 Int?
  isStockable                     Boolean                           @default(false)
  isActive                        Boolean                           @default(true)
  classification                  Category?                         @relation(fields: [classificationId], references: [id])
  classificationId                Int?
  user                            User                              @relation(fields: [userId], references: [id])
  userId                          Int                               @default(1)
  InvoiceDetail                   InvoiceDetail[]
  ContractItems                   ContractItems[]
  ContractFinancialDetailSchedule ContractFinancialDetailSchedule[]
}

model CostCenter {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  contractId Contracts[]
}

model ContractType {
  id                Int                 @id @default(autoincrement())
  name              String
  contractId        Contracts[]
  ContractTemplates ContractTemplates[]
}

model MeasuringUnit {
  id                              Int                               @id @default(autoincrement())
  name                            String
  ContractFinancialDetail         ContractFinancialDetail[]
  ContractFinancialDetailSchedule ContractFinancialDetailSchedule[]
  InvoiceDetail                   InvoiceDetail[]
  Item                            Item[]
}

model PaymentType {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @unique
  contractId              Contracts[]
  ContractFinancialDetail ContractFinancialDetail[]

  Transactions Transactions[]
}

model ContractStatus {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  contractId         Contracts[]
  WorkFlowXContracts WorkFlowXContracts[]
}

model ContractWFStatus {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  Desription            String                  @default("")
  WorkFlowContractTasks WorkFlowContractTasks[]
  WorkFlowXContracts    WorkFlowXContracts[]
  ContractId            Contracts[]
  ContractTasks         ContractTasks[]
}

model ContractAttachments {
  id           Int        @id @default(autoincrement())
  updateadAt   DateTime   @updatedAt
  createdAt    DateTime   @default(now())
  fieldname    String
  originalname String
  encoding     String
  mimetype     String
  destination  String
  filename     String
  path         String
  size         Int
  contract     Contracts? @relation(fields: [contractId], references: [id])
  contractId   Int?
}

model VatQuota {
  id                      Int                       @id @default(autoincrement())
  updateadAt              DateTime                  @updatedAt
  createdAt               DateTime                  @default(now())
  VatCode                 String
  VATDescription          String
  VATPercent              Int
  VATType                 Int
  AccVATPercent           Int
  ContractFinancialDetail ContractFinancialDetail[]
  InvoiceDetail           InvoiceDetail[]
  Item                    Item[]
}

model BillingFrequency {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  ContractItems ContractItems[]
}

model ContractContent {
  id         Int        @id @default(autoincrement())
  updateadAt DateTime   @updatedAt
  createdAt  DateTime   @default(now())
  content    String     @db.Text
  contract   Contracts? @relation(fields: [contractId], references: [id])
  contractId Int?       @unique
}


model additionalActType {
  id                      Int                       @id @default(autoincrement())
  updateadAt              DateTime                  @updatedAt
  createdAt               DateTime                  @default(now())
  name                    String
  additionalActType       Contracts[]     
}

model Contracts {
  id                    Int                     @id @default(autoincrement())
  number                String
  type                  ContractType            @relation(fields: [typeId], references: [id])
  typeId                Int
  costcenter            CostCenter              @relation(fields: [costcenterId], references: [id])
  costcenterId          Int                     @default(1)
  status                ContractStatus          @relation(fields: [statusId], references: [id])
  statusId              Int
  statusWF              ContractWFStatus?       @relation(fields: [statusWFId], references: [id])
  statusWFId            Int?                    @default(1)
  start                 DateTime
  end                   DateTime
  sign                  DateTime?
  completion            DateTime?
  remarks               String?
  Category              Category?               @relation(fields: [categoryId], references: [id])
  categoryId            Int?
  departament           Department?             @relation(fields: [departmentId], references: [id])
  departmentId          Int?
  cashflow              Cashflow?               @relation(fields: [cashflowId], references: [id])
  cashflowId            Int?
  location              Location?               @relation(fields: [locationId], references: [id])
  locationId            Int?
  automaticRenewal      Boolean?                @default(false)
  partner               Partners                @relation("partner", fields: [partnersId], references: [id])
  partnersId            Int
  entity                Partners                @relation("entity", fields: [entityId], references: [id])
  entityId              Int
  parentId              Int?                    @default(0)
  PartnerPerson         Persons?                @relation("partner", fields: [partnerpersonsId], references: [id])
  partnerpersonsId      Int?
  EntityPerson          Persons?                @relation("entity", fields: [entitypersonsId], references: [id])
  entitypersonsId       Int?
  EntityAddress         Address?                @relation("entity", fields: [entityaddressId], references: [id])
  entityaddressId       Int?
  PartnerAddress        Address?                @relation("partner", fields: [partneraddressId], references: [id])
  partneraddressId      Int?
  EntityBank            Banks?                  @relation("entity", fields: [entitybankId], references: [id])
  entitybankId          Int?
  PartnerBank           Banks?                  @relation("partner", fields: [partnerbankId], references: [id])
  partnerbankId         Int?
  ContractItems         ContractItems[]
  ContractAttachments   ContractAttachments[]
  ContractContent       ContractContent[]
  PaymentType           PaymentType?            @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId         Int?
  User                  User?                   @relation(fields: [userId], references: [id])
  userId                Int?
  isPurchasing          Boolean?                @default(false)
  ContractDynamicFields ContractDynamicFields[]
  ContractTasks         ContractTasks[]
  additionalActType     additionalActType?       @relation(fields: [additionalTypeId], references: [id])
  additionalTypeId      Int?

  Invoice Invoice[]
}



model ContractsAudit {
  auditid               Int       @id @default(autoincrement())
  operationType         String
  id                    Int
  updateadAt            DateTime  @updatedAt
  createdAt             DateTime  @default(now())
  number                String
  typeId                Int?
  costcenterId          Int?
  statusId              Int?      @default(1)
  statusWFId            Int?      @default(1)
  start                 DateTime?
  end                   DateTime?
  sign                  DateTime?
  completion            DateTime?
  remarks               String?
  categoryId            Int?
  departmentId          Int?
  cashflowId            Int?
  locationId            Int?
  automaticRenewal      Boolean?
  partnersId            Int?
  entityId              Int?
  parentId              Int?
  partnerpersonsId      Int?
  entitypersonsId       Int?
  entityaddressId       Int?
  partneraddressId      Int?
  entitybankId          Int?
  partnerbankId         Int?
  contractAttachmentsId Int?
  paymentTypeId         Int?
  contractContentId     Int?
  userId                Int?
}

model ContractDynamicFields {
  id         Int        @id @default(autoincrement())
  updateadAt DateTime   @updatedAt
  createdAt  DateTime   @default(now())
  contract   Contracts? @relation(fields: [contractId], references: [id])
  contractId Int
  dffInt1    Int?
  dffInt2    Int?
  dffInt3    Int?
  dffInt4    Int?
  dffString1 String?
  dffString2 String?
  dffString3 String?
  dffString4 String?
  dffDate1   DateTime?
  dffDate2   DateTime?
}

model DynamicFields {
  id         Int      @id @default(autoincrement())
  updateadAt DateTime @updatedAt
  createdAt  DateTime @default(now())
  fieldname  String   @unique
  fieldlabel String
  fieldorder Int      @unique
  fieldtype  String
}

model ContractItems {
  id                      Int                       @id @default(autoincrement())
  updateadAt              DateTime                  @updatedAt
  createdAt               DateTime                  @default(now())
  contract                Contracts?                @relation(fields: [contractId], references: [id])
  contractId              Int
  item                    Item?                     @relation(fields: [itemid], references: [id])
  itemid                  Int
  frequency               BillingFrequency?         @relation(fields: [billingFrequencyid], references: [id])
  billingFrequencyid      Int
  currency                Currency?                 @relation(fields: [currencyid], references: [id])
  currencyid              Int
  currencyValue           Float?
  active                  Boolean                   @default(true)
  ContractFinancialDetail ContractFinancialDetail[]
}

model Currency {
  id                              Int                               @id @default(autoincrement())
  code                            String                            @unique
  name                            String                            @unique
  ContractItems                   ContractItems[]
  ContractFinancialDetailSchedule ContractFinancialDetailSchedule[]
  item                            ContractFinancialDetail[]         @relation("item")
  guarantee                       ContractFinancialDetail[]         @relation("guarantee")
  goodexecution                   ContractFinancialDetail[]         @relation("goodexecution")
  Invoice                         Invoice[]
  PartnersBanksExtraRates         PartnersBanksExtraRates[]

  Transactions Transactions[]

  TransactionDetail TransactionDetail[]

  TransactionDetailEvents TransactionDetailEvents[]
}

model Bank {
  id             Int                       @id @default(autoincrement())
  name           String                    @unique
  goodexecutionb ContractFinancialDetail[] @relation("goodexecutionb")
  guaranteeb     ContractFinancialDetail[] @relation("guaranteeb")
}

model ContractFinancialDetail {
  id                              Int                               @id @default(autoincrement())
  updateadAt                      DateTime                          @updatedAt
  createdAt                       DateTime                          @default(now())
  itemid                          Int?
  price                           Float
  currency                        Currency?                         @relation("item", fields: [currencyid], references: [id])
  currencyid                      Int?
  currencyValue                   Float?
  currencyPercent                 Float?
  billingDay                      Int
  billingQtty                     Float
  billingFrequencyid              Int?
  measuringUnit                   MeasuringUnit?                    @relation(fields: [measuringUnitid], references: [id])
  measuringUnitid                 Int?
  paymentType                     PaymentType?                      @relation(fields: [paymentTypeid], references: [id])
  paymentTypeid                   Int?
  billingPenaltyPercent           Float
  billingDueDays                  Int
  remarks                         String?                           @db.VarChar(150)
  guaranteeLetter                 Boolean?
  guaranteecurrency               Currency?                         @relation("guarantee", fields: [guaranteeLetterCurrencyid], references: [id])
  guaranteeLetterCurrencyid       Int?
  guaranteeLetterDate             DateTime?
  guaranteeLetterValue            Float?
  guaranteeLetterInfo             String?
  guaranteeLetterBank             Bank?                             @relation("guaranteeb", fields: [guaranteeLetterBankId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  guaranteeLetterBankId           Int?
  goodexecutionLetter             Boolean?
  goodexecutionLetterCurrency     Currency?                         @relation("goodexecution", fields: [goodexecutionLetterCurrencyId], references: [id])
  goodexecutionLetterCurrencyId   Int?
  goodexecutionLetterDate         DateTime?
  goodexecutionLetterValue        Float?
  goodexecutionLetterInfo         String?
  goodexecutionLetterBank         Bank?                             @relation("goodexecutionb", fields: [goodexecutionLetterBankId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  goodexecutionLetterBankId       Int?
  active                          Boolean?                          @default(true)
  items                           ContractItems?                    @relation(fields: [contractItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contractItemId                  Int?
  ContractFinancialDetailSchedule ContractFinancialDetailSchedule[]
  advancePercent                  Float?
  vat                             VatQuota?                         @relation(fields: [vatId], references: [id])
  vatId                           Int?

  Invoice Invoice[]
}

model ContractFinancialDetailSchedule {
  id                      Int                      @id @default(autoincrement())
  updateadAt              DateTime                 @updatedAt
  createdAt               DateTime                 @default(now())
  item                    Item?                    @relation(fields: [itemid], references: [id])
  itemid                  Int?
  currency                Currency?                @relation(fields: [currencyid], references: [id])
  currencyid              Int?
  date                    DateTime
  measuringUnit           MeasuringUnit?           @relation(fields: [measuringUnitid], references: [id])
  measuringUnitid         Int?
  billingQtty             Float
  totalContractValue      Float
  billingValue            Float
  isInvoiced              Boolean
  isPayed                 Boolean
  active                  Boolean                  @default(true)
  financial               ContractFinancialDetail? @relation(fields: [contractfinancialItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contractfinancialItemId Int?

  Invoice Invoice[]
}

model Alerts {
  id              Int      @id @default(autoincrement())
  updateadAt      DateTime @updatedAt
  createdAt       DateTime @default(now())
  name            String
  isActive        Boolean
  subject         String
  text            String   @db.Text
  internal_emails String
  nrofdays        Int
  param           String
  isActivePartner Boolean
  isActivePerson  Boolean
}

model AlertsHistory {
  id           Int      @id @default(autoincrement())
  updateadAt   DateTime @updatedAt
  createdAt    DateTime @default(now())
  alertId      Int
  alertContent String   @db.Text
  sentTo       String   @db.Text
  contractId   Int
  criteria     String   @db.Text
  param        String   @db.Text
  nrofdays     Int
}

model ContractAlertSchedule {
  id           Int      @id @default(autoincrement())
  updateadAt   DateTime @updatedAt
  createdAt    DateTime @default(now())
  contractId   Int
  alertId      Int
  alertname    String
  datetoBeSent DateTime
  isActive     Boolean
  status       Boolean
  subject      String
  nrofdays     Int
}

model ContractTasksStatus {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  Desription    String          @default("")
  ContractTasks ContractTasks[]
}

model ContractTasks {
  id              Int                   @id @default(autoincrement())
  updateadAt      DateTime              @updatedAt
  createdAt       DateTime              @default(now())
  taskName        String
  contract        Contracts?            @relation(fields: [contractId], references: [id])
  contractId      Int?
  status          ContractTasksStatus?  @relation(fields: [statusId], references: [id])
  statusId        Int
  statusWF        ContractWFStatus?     @relation(fields: [statusWFId], references: [id])
  statusWFId      Int                   @default(4)
  requestor       User?                 @relation("requestor", fields: [requestorId], references: [id])
  requestorId     Int
  assigned        User?                 @relation("assigned", fields: [assignedId], references: [id])
  assignedId      Int
  due             DateTime
  notes           String
  uuid            String
  type            String
  rejected_reason String
  taskPriority    ContractTasksPriority @relation(fields: [taskPriorityId], references: [id])
  taskPriorityId  Int
}

model ContractTasksPriority {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  WorkFlowTaskSettings  WorkFlowTaskSettings[]
  WorkFlowContractTasks WorkFlowContractTasks[]
  ContractTasks         ContractTasks[]
}

model ContractTasksReminders {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique
  days                 Int                    @default(0)
  WorkFlowTaskSettings WorkFlowTaskSettings[]
}

model ContractTasksDueDates {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique
  days                 Int                    @default(0)
  WorkFlowTaskSettings WorkFlowTaskSettings[]
}

model WorkFlow {
  id                    Int                     @id @default(autoincrement())
  updateadAt            DateTime                @updatedAt
  createdAt             DateTime                @default(now())
  wfName                String
  wfDescription         String
  status                Boolean
  WorkFlowRules         WorkFlowRules[]
  WorkFlowTaskSettings  WorkFlowTaskSettings[]
  WorkFlowRejectActions WorkFlowRejectActions[]
}

model WorkFlowRules {
  id                  Int      @id @default(autoincrement())
  updateadAt          DateTime @updatedAt
  createdAt           DateTime @default(now())
  workflow            WorkFlow @relation(fields: [workflowId], references: [id])
  workflowId          Int
  ruleFilterName      String
  ruleFilterSource    String
  ruleFilterValue     Int
  ruleFilterValueName String   @default("NA")
}

model WorkFlowTaskSettings {
  id                        Int                         @id @default(autoincrement())
  updateadAt                DateTime                    @updatedAt
  createdAt                 DateTime                    @default(now())
  workflow                  WorkFlow                    @relation(fields: [workflowId], references: [id])
  workflowId                Int
  WorkFlowTaskSettingsUsers WorkFlowTaskSettingsUsers[]
  taskName                  String
  taskDueDate               ContractTasksDueDates       @relation(fields: [taskDueDateId], references: [id])
  taskDueDateId             Int
  taskNotes                 String
  taskSendNotifications     Boolean
  taskSendReminders         Boolean
  taskReminder              ContractTasksReminders      @relation(fields: [taskReminderId], references: [id])
  taskReminderId            Int
  taskPriority              ContractTasksPriority       @relation(fields: [taskPriorityId], references: [id])
  taskPriorityId            Int
  WorkFlowContractTasks     WorkFlowContractTasks[]
  WorkFlowXContracts        WorkFlowXContracts[]
}

model WorkFlowTaskSettingsUsers {
  id                     Int                  @id @default(autoincrement())
  updateadAt             DateTime             @updatedAt
  createdAt              DateTime             @default(now())
  workflowSettings       WorkFlowTaskSettings @relation(fields: [workflowTaskSettingsId], references: [id])
  workflowTaskSettingsId Int
  user                   User?                @relation(fields: [userId], references: [id])
  userId                 Int
  approvalOrderNumber    Int
  approvalStepName       String
}

model WorkFlowRejectActions {
  id                                     Int      @id @default(autoincrement())
  updateadAt                             DateTime @updatedAt
  createdAt                              DateTime @default(now())
  workflow                               WorkFlow @relation(fields: [workflowId], references: [id])
  workflowId                             Int
  sendNotificationsToAllApprovers        Boolean
  sendNotificationsToContractResponsible Boolean
}

model WorkFlowContractTasks {
  id                     Int                   @id @default(autoincrement())
  updateadAt             DateTime              @updatedAt
  createdAt              DateTime              @default(now())
  name                   String
  text                   String
  contractId             Int?
  status                 ContractWFStatus?     @relation(fields: [statusId], references: [id])
  statusId               Int
  requestor              User?                 @relation("requestorwf", fields: [requestorId], references: [id])
  requestorId            Int
  assigned               User?                 @relation("assignedwf", fields: [assignedId], references: [id])
  assignedId             Int
  workflowSettings       WorkFlowTaskSettings  @relation(fields: [workflowTaskSettingsId], references: [id])
  workflowTaskSettingsId Int
  uuid                   String
  approvalOrderNumber    Int
  duedates               DateTime
  taskPriority           ContractTasksPriority @relation(fields: [taskPriorityId], references: [id])
  taskPriorityId         Int
  reminders              DateTime
}

model WorkFlowXContracts {
  id                     Int                  @id @default(autoincrement())
  updateadAt             DateTime             @updatedAt
  createdAt              DateTime             @default(now())
  contractId             Int?
  wfstatus               ContractWFStatus?    @relation(fields: [wfstatusId], references: [id])
  wfstatusId             Int
  ctrstatus              ContractStatus       @relation(fields: [ctrstatusId], references: [id])
  ctrstatusId            Int
  workflowSettings       WorkFlowTaskSettings @relation(fields: [workflowTaskSettingsId], references: [id])
  workflowTaskSettingsId Int
}

model ContractTemplates {
  id             Int           @id @default(autoincrement())
  updateadAt     DateTime      @updatedAt
  createdAt      DateTime      @default(now())
  name           String
  active         Boolean
  contractType   ContractType? @relation(fields: [contractTypeId], references: [id])
  contractTypeId Int?
  notes          String
  content        String        @db.Text
}

model Partners {
  id                     Int                       @id @default(autoincrement())
  updateadAt             DateTime                  @updatedAt
  createdAt              DateTime                  @default(now())
  name                   String                    @unique
  fiscal_code            String                    @unique
  commercial_reg         String                    @unique
  state                  String
  type                   String
  email                  String
  remarks                String
  isVatPayer             Boolean                   @default(false)
  contractsId            Int?
  paymentTerm            Int?                      @default(10)
  Persons                Persons[]
  Address                Address[]
  Banks                  Banks[]
  Contracts              Contracts[]               @relation("partner")
  Entity                 Contracts[]               @relation("entity")
  Groups                 Groups[]
  InvoiceDetail          InvoiceDetail[]
  partnerInvoice         Invoice[]                 @relation("partner")
  entityInvoice          Invoice[]                 @relation("entity")
  PartnerBanksExtraRates PartnersBanksExtraRates[] @relation("partner")
  picture                String?
  TransactionsPartner    Transactions[] @relation("partner")
  TransactionsEntity     Transactions[] @relation("entity")
  TransactionDetailEntity  TransactionDetail[] @relation("entity")
  TransactionDetailPartner TransactionDetail[] @relation("partner")
  TransactionDetailEventsEntity TransactionDetailEvents[] @relation("entity")
  TransactionDetailEventsPartner TransactionDetailEvents[] @relation("partner")
}

model PartnersBanksExtraRates {
  id         Int       @id @default(autoincrement())
  updateadAt DateTime  @updatedAt
  createdAt  DateTime  @default(now())
  partners   Partners? @relation("partner", fields: [partnersId], references: [id])
  partnersId Int?
  currency   Currency? @relation(fields: [currencyId], references: [id])
  currencyId Int?
  percent    Float?
}

model Persons {
  id             Int         @id @default(autoincrement())
  updateadAt     DateTime    @updatedAt
  createdAt      DateTime    @default(now())
  name           String      @unique
  phone          String?
  email          String?     @unique
  legalrepresent Boolean?
  role           String?
  partner        Partners    @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId      Int
  Contracts      Contracts[] @relation("partner")
  Entity         Contracts[] @relation("entity")
}

model Address {
  id              Int         @id @default(autoincrement())
  updateadAt      DateTime    @updatedAt
  createdAt       DateTime    @default(now())
  addressName     String?
  addressType     String?
  Country         String?
  County          String?
  City            String?
  Street          String?
  Number          String?
  postalCode      String?
  Status          Boolean?
  Default         Boolean?
  aggregate       Boolean?
  completeAddress String?
  partner         Partners    @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId       Int
  Contracts       Contracts[] @relation("partner")
  Entity          Contracts[] @relation("entity")
  Invoice         Invoice[]
}

model Banks {
  id         Int         @id @default(autoincrement())
  updateadAt DateTime    @updatedAt
  createdAt  DateTime    @default(now())
  bank       String?
  currency   String?
  branch     String?
  iban       String?
  status     Boolean?
  isDefault  Boolean?
  partner    Partners    @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId  Int
  Contracts  Contracts[] @relation("partner")
  Enity      Contracts[] @relation("entity")
  Invoice    Invoice[]

  TransactionsEntity Transactions[] @relation("entity")
  TransactionsPartner Transactions[] @relation("partner")
}


model User {
  id                        Int                         @id @default(autoincrement())
  updatedAt                 DateTime                    @updatedAt
  createdAt                 DateTime                    @default(now())
  name                      String                      @unique
  email                     String                      @unique
  password                  String
  roles                     Role_User[]
  status                    Boolean
  picture                   String?
  User_Groups               Groups[]
  Contracts                 Contracts[]
  AssignedTasks             ContractTasks[]             @relation("assigned")
  RequestorTasks            ContractTasks[]             @relation("requestor")
  WorkFlowTaskSettingsUsers WorkFlowTaskSettingsUsers[]
  WorkFlowAssignedTasks     WorkFlowContractTasks[]     @relation("assignedwf")
  WorkFlowRequestorTasks    WorkFlowContractTasks[]     @relation("requestorwf")
  ForgotPass                ForgotPass[]
  Invoice                   Invoice[]
  Item                      Item[]

  Transactions Transactions[]
}

model ForgotPass {
  id              Int      @id @default(autoincrement())
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())
  email           String
  actual_password String
  old_password    String
  uuid            String   @unique
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
}

model Role {
  id       Int         @id @default(autoincrement())
  roleName String
  users    Role_User[]
}

model Role_User {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId Int
}

model Groups {
  id          Int        @id @default(autoincrement())
  updateadAt  DateTime   @updatedAt
  createdAt   DateTime   @default(now())
  name        String?
  description String?
  entity      Partners[]
  User        User[]
}

model ExchangeRates {
  id         Int      @id @default(autoincrement())
  updateadAt DateTime @updatedAt
  createdAt  DateTime @default(now())
  date       String
  amount     Float
  name       String
  multiplier Int
}

model InvoiceStatus {
  id         Int       @id @default(autoincrement())
  updateadAt DateTime  @updatedAt
  createdAt  DateTime  @default(now())
  name       String    @unique
  Invoice    Invoice[]

  Transactions Transactions[]
}

model InvoiceType {
  id         Int       @id @default(autoincrement())
  updateadAt DateTime  @updatedAt
  createdAt  DateTime  @default(now())
  name       String    @unique
  Invoice    Invoice[]
}

model TransactionType {
  id         Int       @id @default(autoincrement())
  updateadAt DateTime  @updatedAt
  createdAt  DateTime  @default(now())
  name       String    @unique
  Invoice    Invoice[]
}

model Invoice {
  id                Int              @id @default(autoincrement())
  updateadAt        DateTime         @updatedAt
  createdAt         DateTime         @default(now())
  partner           Partners?        @relation("partner", fields: [partnerId], references: [id])
  partnerId         Int?
  entity            Partners?        @relation("entity", fields: [entityId], references: [id])
  entityId          Int?
  number            String
  date              DateTime
  duedate           DateTime
  totalAmount       Float
  vatAmount         Float
  totalPayment      Float
  type              InvoiceType?     @relation(fields: [typeId], references: [id])
  typeId            Int?
  transaction       TransactionType? @relation(fields: [transactionTypeId], references: [id])
  transactionTypeId Int?
  status            InvoiceStatus?   @relation(fields: [statusId], references: [id])
  statusId          Int?
  entityBank        Banks?           @relation(fields: [entitybankId], references: [id])
  entitybankId      Int?
  partnerAddress    Address?         @relation(fields: [partneraddressId], references: [id])
  partneraddressId  Int?
  currencyRate      Float
  user              User             @relation(fields: [userId], references: [id])
  userId            Int
  currency          Currency?        @relation(fields: [currencyId], references: [id])
  currencyId        Int?
  InvoiceDetail     InvoiceDetail[]
  remarks           String
  series            DocumentSeries?  @relation(fields: [seriesId], references: [id])
  seriesId          Int?
  serialNumber      String
  eqvTotalAmount    Float
  eqvVatAmount      Float
  eqvTotalPayment   Float
  restPayment       Float          @default(-1)
  vatOnReceipt      Boolean
  parentId          Int?           @default(0)
  movement_type     Int            @default(1)
  contract          Contracts?     @relation(fields: [contractId], references: [id])
  contractId        Int?
  financialItem     ContractFinancialDetail? @relation(fields: [contractfinancialItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contractfinancialItemId Int?
  financialItemScedule ContractFinancialDetailSchedule?  @relation(fields: [contractFinancialScheduleId], references: [id])
  contractFinancialScheduleId Int?

  @@unique([entityId, typeId,serialNumber, number,partnerId])
  TransactionDetail TransactionDetail[]
  TransactionDetailEvents TransactionDetailEvents[]
}

model InvoiceDetail {
  id              Int            @id @default(autoincrement())
  updateadAt      DateTime       @updatedAt
  createdAt       DateTime       @default(now())
  invoice         Invoice        @relation(fields: [invoiceId], references: [id])
  invoiceId       Int
  entity          Partners       @relation(fields: [entityId], references: [id])
  entityId        Int
  qtty            Float
  price           Float
  measuringUnit   MeasuringUnit? @relation(fields: [measuringUnitid], references: [id])
  measuringUnitid Int?
  vat             VatQuota?      @relation(fields: [vatId], references: [id])
  vatId           Int?
  vatValue        Float
  lineValue       Float
  totalValue      Float
  description     String
  item            Item?          @relation(fields: [itemId], references: [id])
  itemId          Int?
}

model DocumentSeries {
  id              Int       @id @default(autoincrement())
  updateadAt      DateTime  @updatedAt
  createdAt       DateTime  @default(now())
  entityId        Int
  updatedByUserId Int
  documentTypeId  Int
  series          String    @unique
  start_number    Int
  final_number    Int
  last_number     Int
  isActive        Boolean
  Invoice         Invoice[]

  Transactions Transactions[]
}

model ExchangeRatesBNR {
  id         Int      @id @default(autoincrement())
  updateadAt DateTime @updatedAt
  createdAt  DateTime @default(now())
  date       String
  amount     Float
  name       String
  multiplier String?
}

model Transactions {
  id                Int      @id @default(autoincrement())
  updateadAt        DateTime @updatedAt
  createdAt         DateTime @default(now())
  partner           Partners?        @relation("partner", fields: [partnerId], references: [id])
  partnerId         Int?
  entity            Partners?        @relation("entity", fields: [entityId], references: [id])
  entityId          Int?
  number            Int
  date              DateTime
  currency          Currency?        @relation(fields: [currencyId], references: [id])
  currencyId        Int?
  paymentValue      Float
  exchangeRate      Float
  eqvTotalPayment   Float
  type              PaymentType?     @relation(fields: [typeId], references: [id])
  typeId            Int?
  entityBank        Banks?           @relation("entity", fields: [entitybankId], references: [id])
  entitybankId      Int?
  PartnerBank       Banks?           @relation("partner", fields: [partnerbankId], references: [id])
  partnerbankId     Int?
  bank              Float?
  cash              Float?
  card              Float?
  meal              Float?
  remarks           String?
  user              User             @relation(fields: [userId], references: [id])
  userId            Int
  status            InvoiceStatus?   @relation(fields: [statusId], references: [id])
  statusId          Int?
  series            DocumentSeries?  @relation(fields: [seriesId], references: [id])
  seriesId          Int?
  movement_type     Int              @default(1)
  TransactionDetail TransactionDetail[]
  @@unique([entityId, number])
}

model TransactionDetail {
  id                Int      @id @default(autoincrement())
  updateadAt        DateTime @updatedAt
  createdAt         DateTime @default(now())
  transactions      Transactions?  @relation(fields: [transactionId], references: [id])
  transactionId     Int?
  invoice           Invoice?        @relation(fields: [invoiceId], references: [id])
  invoiceId         Int 
  entity            Partners?        @relation("entity", fields: [entityId], references: [id])
  entityId          Int?
  partner           Partners?        @relation("partner", fields: [partnerId], references: [id])
  partnerId         Int?
  partPaymentValue  Float
  currency          Currency?        @relation(fields: [currencyId], references: [id])
  currencyId        Int?
  exchangeRate      Float
  eqvTotalPayment   Float
  TransactionDetailEvents TransactionDetailEvents[]
}

model TransactionDetailEvents {
  id                            Int      @id @default(autoincrement())
  updateadAt                    DateTime @updatedAt
  createdAt                     DateTime @default(now())
  transactionDetail            TransactionDetail?  @relation(fields: [transactionDetailId], references: [id])
  transactionDetailId          Int?
  invoice                      Invoice        @relation(fields: [invoiceId], references: [id])
  invoiceId                    Int 
  entity                       Partners?        @relation("entity", fields: [entityId], references: [id])
  entityId                     Int?
  partner                      Partners?        @relation("partner", fields: [partnerId], references: [id])
  partnerId                    Int?
  partPaymentValue             Float
  eqvTotalPayment              Float
  restAmount                   Float
  payFromDate                  DateTime
  payToDate                    DateTime
  currency                     Currency?        @relation(fields: [currencyId], references: [id])
  currencyId                   Int?
}


